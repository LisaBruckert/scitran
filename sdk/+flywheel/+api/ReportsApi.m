% ReportsApi - Site-wide reports
%
% ReportsApi Properties:
%    apiClient - ApiClient instance
%
% ReportsApi Methods
%    getAccessLogReport - Get a report of access log entries for the given parameters
%    getAccessLogTypes  - Get the list of types of access log entries
%    getProjectReport  
%    getSiteReport     
%    getUsageReport     - Get a usage report for the site grouped by month or project
classdef ReportsApi < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = ReportsApi(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

        function [returnData, resp] = getAccessLogReport(obj, varargin)
            % Get a report of access log entries for the given parameters
            % startDate (char):An ISO formatted timestamp for the start time of the report
            % endDate (char):An ISO formatted timestamp for the end time of the report
            % uid (char):User id of the target user
            % limit (integer):Maximum number of records to return
            % subject (char):Limit the report to the subject code of session accessed
            % accessType (vector[char]):The list of access_types to filter logs
            % csv (logical):Set to download a csv file instead of json
            % returns: [vector[ReportAccessLogEntry], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'startDate', []);
            addParameter(x__inp, 'endDate', []);
            addParameter(x__inp, 'uid', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'subject', []);
            addParameter(x__inp, 'accessType', []);
            addParameter(x__inp, 'csv', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.startDate)
                queryParams = [queryParams, 'start_date', flywheel.ApiClient.castParam(x__inp.Results.startDate, 'char')];
            end
            if ~isempty(x__inp.Results.endDate)
                queryParams = [queryParams, 'end_date', flywheel.ApiClient.castParam(x__inp.Results.endDate, 'char')];
            end
            if ~isempty(x__inp.Results.uid)
                queryParams = [queryParams, 'uid', flywheel.ApiClient.castParam(x__inp.Results.uid, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.subject)
                queryParams = [queryParams, 'subject', flywheel.ApiClient.castParam(x__inp.Results.subject, 'char')];
            end
            if ~isempty(x__inp.Results.accessType)
                queryParams = flywheel.ApiClient.formatParamCollection(queryParams, 'access_type', x__inp.Results.accessType, 'multi');
            end
            if ~isempty(x__inp.Results.csv)
                queryParams = [queryParams, 'csv', flywheel.ApiClient.castParam(x__inp.Results.csv, 'logical')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/report/accesslog', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.ReportAccessLogEntry.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAccessLogTypes(obj, varargin)
            % Get the list of types of access log entries
            % returns: [vector[char], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/report/accesslog/types', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.char.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectReport(obj, varargin)
            % getProjectReport
            % projects (char):Specify multiple times to include projects in the report
            % startDate (char):Report start date
            % endDate (char):Report end date
            % returns: [ReportProject, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'projects', []);
            addParameter(x__inp, 'startDate', []);
            addParameter(x__inp, 'endDate', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.projects)
                queryParams = [queryParams, 'projects', flywheel.ApiClient.castParam(x__inp.Results.projects, 'char')];
            end
            if ~isempty(x__inp.Results.startDate)
                queryParams = [queryParams, 'start_date', flywheel.ApiClient.castParam(x__inp.Results.startDate, 'char')];
            end
            if ~isempty(x__inp.Results.endDate)
                queryParams = [queryParams, 'end_date', flywheel.ApiClient.castParam(x__inp.Results.endDate, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/report/project', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.ReportProject.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getSiteReport(obj, varargin)
            % getSiteReport
            % returns: [ReportSite, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/report/site', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.ReportSite.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getUsageReport(obj, type, varargin)
            % Get a usage report for the site grouped by month or project
            % type (char):The type of usage report to generate
            % startDate (char):An ISO formatted timestamp for the start time of the report
            % endDate (char):An ISO formatted timestamp for the end time of the report
            % returns: [vector[ReportUsageEntry], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'type');
            addParameter(x__inp, 'startDate', []);
            addParameter(x__inp, 'endDate', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, type, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.type)
                queryParams = [queryParams, 'type', flywheel.ApiClient.castParam(x__inp.Results.type, 'char')];
            end
            if ~isempty(x__inp.Results.startDate)
                queryParams = [queryParams, 'start_date', flywheel.ApiClient.castParam(x__inp.Results.startDate, 'char')];
            end
            if ~isempty(x__inp.Results.endDate)
                queryParams = [queryParams, 'end_date', flywheel.ApiClient.castParam(x__inp.Results.endDate, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/report/usage', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.ReportUsageEntry.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

    end
end
