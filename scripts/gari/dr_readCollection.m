function dt = dr_readCollection(serverName, collectionName, gearName, gearVersion, measurement)
% This function will take information from the fw server and create a datatable
% ready for analysis. Give a server, a collection name, and the type of data you are interested
% (specifyng the gear name and the version) and optionally, the measurement (for
% example, if AFQ analysis results are requested, we might be interested in FA
% or MD, but not both. If both are required, call the function twice. 
%
% We are not interested in a single project, we want to take information from
% several different projects. Before, this was done keeping control on a excel
% spreadsheet, but we think that now with the Collections we can keep track the
% same way. Just remove the subjects we are not interested from the collection. 
%
% Example:
%       dt = dr_readCollection('stanfordlabs', 'FWmatlabAPI_test', ...
%                              'afq-pipeline-3', '3.0.0_rc3', 'fa')
% 
% Inputs: 
%       - serverName: e.g. 'stanfordlabs'
%       - collectionName: 
%       - gearName: 
%       - gearVersion:
%       - measurement: this is GEAR dependent, in some cases it can be [], e.g.:
%                      AFQ: 'fa', 'md', 'volume' ...
%                      FS: 'aseg', 'aparc2009a' ... (TODO)
%                      others: (TODO)
% 
% Outputs: 
%      - dt: datatable with the required information ready for analysis. 
%
% TODO: 
%   - Review function candidates (search for FC:) and create them in Brian's API
%   - TMAT2: the analysis label is a free field, that can be anything. If we have
%     control over all the subjects we launch and we are careful, it could be
%     used as an identifier, but it does not seem robust. First we need to be
%     sure what the gearName and the gearVersion are, and use them as
%     identifiers, but then the all the analysis can be different. I think we
%     will need to create some flexible unique identifier inside our tables, so
%     that every time we read the same information, the identifier can be
%     changed. Example: our analysis identifier will be clip2roi1_tensorfit_ls,
%     but then we decide to run all the subjects again with the same options in
%     for this params, but modifying another one. Next time we read, we should
%     extend this field with the new modified param in order to select them.


% TODO: 
% Instead of going through everything, take as an input a filtered datatable 
% generated by dr_fwCheckJobs.





% Example inputs to make it work
%{
clear all; clc;

serverName     = 'stanfordlabs';
% collectionName = 'ComputationalReproducibility';
collectionName = 'FWmatlabAPI_test';
% collectionName = 'tmpCollection';
gearName       = 'afq-pipeline-3';
gearVersion    = '3.0.0_rc3';
measurement    = 'volume';

dt = dr_readCollection(serverName, collectionName, gearName, gearVersion, measurement);


plot(dt{dt.Struct=='LeftArcuate','Val'}')
title('LeftArcuate'); xlabel('Profile divisions'); ylabel('FA')
legend(strcat(dt.SubjID(dt.Struct=='LeftArcuate'), "-", ...
              string(dt.TRT(dt.Struct=='LeftArcuate')), "-", ...
              string(dt.AcquMD.scanbValue(dt.Struct=='LeftArcuate'))))


%}


%% 1.- Connect to the server and verify the connection
st = scitran(serverName);
if ~st.verify
    error(fprintf('Connection to %s could not be veryfied', serverName))
end


%% 2.- Connect to the collection, verify it and show the number of sessions for verification
% FC: obtain collection ID from the collection name
collectionID = '';
collections  = st.fw.getAllCollections();
for nc=1:length(collections)
    if strcmp(collections{nc}.label, collectionName)
        collectionID = collections{nc}.id;
    end
end

if isempty(collectionID)
    error(fprintf('Collection %s could not be found on the server %s (verify permissions or the collection name).\n', collectionName, serverName))
else
    thisCollection        = st.fw.getCollection(collectionID);
    sessionsInCollection  = st.fw.getCollectionSessions(idGet(thisCollection));
    fprintf('There are %i sessions in the collection %s (server %s).\n', length(sessionsInCollection), collectionName, serverName)
end

%% 3.- Create the table that we will later populate. 
% This version will be different from the one we already had. 
% This version will include the gearName, gearVersion and measurement columns
% Then we will use other functions to expand afq-pipeline values from the ones
% in freesurfer or others. 
TableElements = {'SubjID','TRT','Proj','SubjectMD','AcquMD','AnalysisMD', 'measurement', 'Struct', 'Val', 'UseIt'};
dt            = array2table(NaN(0,length(TableElements)));
dt.Properties.VariableNames = TableElements;

% The profiles sometimes throw some NaN, sometimes in the borders. 
% If it is less than maxNaNsToClean, substitute, otherwise make everything NaN
% and UseIt=false
doNanSubstitution = 1;
maxNaNsToClean = 5;
interpMethod = 'spline'; % For NaN substitution using the repnan.m method, default is 'linear'


% What is each columns on the datatable?
%{
'SubjID'     : string with the name of the subject. It is usually unique by project,
               but not in the entire collection
'TRT'        : 'TRAIN': only this session for this subject, 'TEST': this is first
                session but the subject has more, 'RETEST': first repeated
                session, 'RETEST2': other sessions, consequtively
'Proj'       : string with the name of the project
'SubjectMD'  : a datatable with all the subject information on FW.
'AcquMD'     : a datatable with all the acquisition information on FW, columns 
               will vary between T1w and DWI, for example
'AnalysisMD' : a datatable with all the analysis information on FW, columns 
               will vary between gears. 
               Unique analysis = gearName+gearVersion+configParams
'measurement': string with the name of the measurement, for example 'fa', 'md',
               'volume', 'ct', 'T1relaxationTime', ...
'Struct'     : Name of the structure in the case of afq, name of segmentation 
               in the case of FS: 'LeftArcuate', 'aseg', ... 
'Val'        : a value is the combination of subject + acqu + analysis
               a datatable with the actual values.csv downloaded from FW. This
               will be usuarlly a vector. In the case of afq, asociated to a
               structure, in the case of FS, can be the aseg values vector...
'UseIt'      : true/false variable. If all elements of the Val vector are NaN,
               it will be false. It can be useful to include or discard subjects
               with other criteria as well. 
%}


%% 4.-  Find all the analyses created with the GEAR(and version) and display them for verification
%   FC: this crawler could make it into a function as well, and there should be some
%   subfunctions as well

% st.fw.getCollectionAnalyses() is not working, so we will crawl it, searching
% and storing only those analyses that comply with hour request.
for ns= 1:length(sessionsInCollection)
    % Get info for the session
    thisSession = sessionsInCollection{ns};
    % Get info for the project the session belong to
    thisProject = st.fw.getProject(thisSession.project);
    fprintf('(%d) Working in session: %s >> %s (%s)\n', ns, thisProject.label, thisSession.subject.code, thisSession.label)
    
    % Obtain the valid analyses per acquisition session and add them to datatable
    % TODO: make it multiparameter, now just takes gearName and gearVersion
    addThisAnalysisIdToMyResults = dr_fwObtainFilteredAnalysis(st, thisSession, gearName, gearVersion);
    
    % FC: This func could give back struct or table rows, to append here. 
    if ~isempty(addThisAnalysisIdToMyResults)
        for na=1:length(addThisAnalysisIdToMyResults)
            thisAnalysis      = addThisAnalysisIdToMyResults{na};
            fprintf('    ... (%d.%d) Analysis: %s \n', ns, na, thisAnalysis.label)
            % Obtain AcquMD
            acquMD = dr_fwObtainAcquMD(st, thisSession, thisAnalysis);
            VALUES = dr_fwObtainValues(st, thisAnalysis, measurement);
            
            
            % Now that we have everything, we can start appending it to our big
            % table that will be the output of this query. 
            % FC: make this into an independent function as well       
            Structures = VALUES.Properties.VariableNames;
            for fg=1:length(Structures)
                Structure = string(regexprep(Structures{fg},'{|}| |_',''));
                % This version is afq centered, so when the data is extracted, the
                % profiles are extracted as a column. When the function is created,
                % I think this should be given as an option. For example, we
                % wouldn't want this for Freesurfer. I am going to leave this
                % working, and then refactor it to allow FS in a more natural way.
                % Right now, we use the datatable in this form to filter structures
                % but usually then we create a flat datatable. Continue thinking
                % about the best way to analyze this. 
                T            = array2table(NaN(1,length(TableElements)));
                T.Properties.VariableNames = TableElements;
                T.SubjID     = string(thisSession.subject.code);
                T.Proj       = categorical(string(thisProject.label));
                T.TRT        = categorical(string(thisSession.label));
                T.SubjectMD  = struct2table(st.fw.getSession(idGet(thisSession)).subject.struct, 'AsArray', true);
                T.SubjectMD.info      = struct2table(T.SubjectMD.info, 'AsArray', true);
                % T.SubjectMD.info      = [];
                T.SubjectMD.AGE       = T.SubjectMD.age / (365*24*60*60);
                T.SubjectMD.age       = [];
                T.SubjectMD.GENDER    = categorical(T.SubjectMD.sex);
                T.SubjectMD.sex       = [];
                T.SubjectMD.tags      = [];
                T.SubjectMD.files     = [];
                T.SubjectMD.infoExists= [];
                T.AcquMD     = acquMD;
                T.AnalysisMD = struct2table(thisAnalysis.job.config.config, 'AsArray', true);
                T.measurement= string(measurement);
                T.Struct     = categorical(string(Structure));
                
                % And now, assign the value vectors
                % But, if there are more than 5 NaN-s, convert all to NaN, otherwise
                % fix it
                T.UseIt = true;
                T.Val   = VALUES{:,Structures{fg}}';
                if doNanSubstitution
                    if sum(isnan(T.Val),2) > 0 & sum(isnan(T.Val),2) <= maxNaNsToClean
                        % For PCA we need to remove the NaN-s, I use this utility called repnan, which
                        % has several options for NaN substitution. 
                        % There are other options to do PCA without NaN substitution (TODO) 
                        % disp(['WH:' shells{kk} ' ' Structure{fg} ' ' subNamesTRAIN{ii} ': There are ' num2str(NaNSubjects{ii,fg}) ' NaN-s that will be substituted with repnan ' interpMethod ' method'])
                        T.Val = repnan(T.Val', interpMethod)';  % default in repnan is 'linear'
                    end
                    if sum(isnan(T.Val),2) > maxNaNsToClean
                        T.Val = NaN(size(T.Val));
                        T.UseIt = false;
                    end
                end
                % Add all the structs for this analysis for this session
                if height(dt) == 0
                    dt = T;
                else
                    dt = [dt; T];
                end
            end
            % Add this analysis info to the general dt datatable
        end
    end
    
end


%% Fix problems that we might have observed when reading this dt
% dr_fwFileInfoWrite('stanfordlabs', 'tmpCollection')

