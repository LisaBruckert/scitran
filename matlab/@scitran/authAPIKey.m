function [] = authAPIKey(obj, varargin)
% Set the token and url
%
%    status = auth(varargin)
%
% The authorization token is generated by running python code (see url
% below). The code opens a browser where the user is prompted to enter
% their Google credentials.  This is the authorization mechanisms used by
% scitran sites.
%
% In addition, there are several configuration steps that may be needed the
% first time you use scitran client in a session.  These initializations
% for the PATH configuration are managed here by the 'init' flag.
%
% INPUTS:
%       'action' - Token action to perform.
%                   'create'  - [default] generate a new token. This will
%                               refresh the token if one exists.
%                   'refresh' - refresh an existing token.
%                   'revoke'  - revoke an existing token. For security this
%                               should be done by the user when they are
%                               no longer in need of the token. Each token
%                               and stAuth profile will be deleted.
%
%       'instance' - String denoting the st instance to authorize
%                     against. Information about the instance is saved
%                     within a mat file (e.g. stAuth.mat) and loaded when
%                     chosen. Default='sni_st' (sni-st.stanford.edu). New
%                     instances will have to be added to this repo in the
%                     correct format, with the client_id and client_secret
%                     stored as vars in the mat file (for new connections
%                     users are prompted for the client_secret.
%
%
%  OUTPUTS:
%       obj.token   - string containing the token
%       obj.url     - the base url for the instance
%       status      - boolean where 0=success and >0 denotes failure.
%
% EXAMPLES:
%
%  (Default)
%  status = obj.auth('action', 'create', 'instance', 'scitran', 'init',false);
%
%  p.action = 'create'; p.init = true; p.instance = 'scitran';
%  st = scitran;
%  status = st.auth(p);
%
%  SEE ALSO:
%       stGet.m, stPut.m,
%       https://github.com/scitran/scripts/blob/master/oauth2cli.py
%
% NOTES:
%  The python code requires that:
%       1) Start matlab from a terminal (to inheret your ENV) OR
%          otherwise properly set your ENV (PATH) to include paths to
%          python & required libs.
%       2) Have certain python libs installed and on your path.
%          Those libs are:
%               oauth2client. * Hint: "pip install oauth2client" *
%       3) Have access to port 9000 to open a browser window/tab. By
%          default this should work just fine.
%       4) Note that you will be prompted for the client secret
%          (which will be saved for you in an stAuth.mat file). This
%          secret can only be given by an administrator of the instance you
%          wish to connect to.

% TODO: Add message about the oauth2cli popout that warns it's aobut to happen
% (C) Stanford VISTA Lab, 2016 - LMP
actions = {'create'};

p = inputParser;
p.addParameter('action', 'create', @(x) any(strcmp(x,actions)));
p.addParameter('instance', 'scitran', @ischar);
p.parse(varargin{:})

instance = p.Results.instance;
if isempty(instance)
    disp('instance empty. Aborting...');
    return
end
obj.instance = instance;




%% Configure MATLAB warning messages

% Matlab warning ids to check (and turn off)
warn_ids = {'MATLAB:namelengthmaxexceeded'};

% Checks and turns off MATLAB warnings
for ii = 1:numel(warn_ids)
    w = warning('query', warn_ids{ii});
    if strcmpi(w.state, 'on')
        warning('off', warn_ids{ii});
    end
end


%% Load or create local token file

% Base directory to store user-specific files
stDir = fullfile(getenv('HOME'), '.stclient');
if ~exist(stDir,'dir')
    mkdir(stDir);
end

% If the file does not exist, then copy it from the path
tokenFile = fullfile(stDir, 'st_tokens');
obj.token = '';

if ~exist(tokenFile, 'file')
    st = {};
else
    st = loadjson(tokenFile);
end


%% Load instance and client information (used in python command)

% Check for client/instance info in the localAuthFile
% Prompt to add it if not found, then save it for next time.
if ~isfield(st, instance)
    prompt = sprintf('Unknown instance: \n ''%s'' is not a known instance. \n Would you like to add it to your local config? (y/n): ', instance);
    response = input(prompt,'s');
    if lower(response) == 'y'
        obj.url    = input('Please enter the instance url: ', 's');
        obj.token    = ['scitran-user ', input('Please enter the instance token: ', 's')];
        % Check that fields are not blank
        if isempty(obj.token) || isempty(obj.url);
            disp('One more more keys is empty, aborting');
            return
        else
            st.(instance).token = obj.token;
            st.(instance).client_url = obj.url;
            savejson('', st, tokenFile);
            disp('Instance URL and token saved.');
        end
    else
        disp('Aborting');
        return
    end
else
    obj.token = st.(instance).token;
    obj.url = st.(instance).url;
end

end
