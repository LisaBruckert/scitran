function [token, client_url, status] = stAuth(varargin)
% [token, client_url, status] = stAuth(varargin)
% 
%  Get an authorization token for scitran download/upload. 
% 
%  The token is generated by running python code (see url below). The code
%  will open a browser where you will be prompted to enter your google
%  credentials. The token will be saved in the user's home directory.
% 
% 
%  NOTE: The python code requires that:
%       1) Start matlab from a terminal (to inheret your ENV) or
%          otherwise properly set your ENV (PATH) to include paths to
%          python & required libs.
%       2) Have certain python libs installed and on your path. 
%          Those libs are:
%               oauth2client. * Hint: "pip install oauth2client" *
%       3) Have access to port 9000 to open a browser window/tab. By
%          default this should work just fine.
%       4) Note that you will be prompted for the client secret
%          (which will be saved for you in an stAuth.mat file). This
%          secret can only be given by an administrator of the instance you
%          wish to connect to.
% 
% 
% INPUTS: 
%       'action' - Token action to perform.
%                   'create'  - [default] generate a new token. This will
%                               refresh the token if one exists.
%                   'refresh' - refresh an existing token.
%                   'revoke'  - revoke an existing token. For security this
%                               should be done by the user when they are 
%                               no longer in need of the token. Each token
%                               and stAuth profile will be deleted.
% 
%       'instance' - String denoting the st instance to authorize
%                     against. Information about the instance is saved
%                     within a mat file (e.g. stAuth.mat) and loaded when
%                     chosen. Default='sni_st' (sni-st.stanford.edu). New
%                     instances will have to be added to this repo in the
%                     correct format, with the client_id and client_secret
%                     stored as vars in the mat file (for new connections
%                     users are prompted for the client_secret.
%       
%       
%  OUTPUTS:
%       token      - string containing the token
%
%       client_url - the base url for the instance
% 
%       status     - boolean where 0=success and >0 denotes failure.
% 
% 
%  EXAMPLE USAGE:
%       [token, client_url, status] = stAuth('action', 'create', 'instance', 'scitran'); 
%             
%           * Note that for the above default usage no inputs are required.
%       
% 
%  SEE ALSO:
%       stGet.m, stPut.m, 
%       https://github.com/scitran/scripts/blob/master/oauth2cli.py
% 
% 
% 
% (C) Stanford VISTA Lab, 2016 - LMP
% 
% 

%% Parse inputs

actions = {'create','refresh','revoke'};

p = inputParser;
p.addOptional('action', 'create', @(x) any(strcmp(x,actions)));
p.addOptional('instance', 'scitran', @ischar);
p.parse(varargin{:})

action = p.Results.action;
instance = p.Results.instance;


%% Load or create local client_auth file

% Base directory to store user-specific files
stDir = fullfile(getenv('HOME'), '.stclient');
if ~exist(stDir,'dir') 
    mkdir(stDir); 
end

% If the file does not exist, then copy it from the path
localAuthFile = fullfile(stDir, 'stAuth.json');
if ~exist(localAuthFile, 'file')
    copyfile(which('stAuth.json'), localAuthFile)
end


%% Set path to token file and initilize token
tokenFile = fullfile(stDir, ['st_token_', instance]);
token = '';


%% Load instance and client information (used in python command)

st = loadjson(localAuthFile); 

% Check for client/instance info in the localAuthFile 
% Prompt to add it if not found, then save it for next time.
if ~isfield(st, instance) 
    disp('Known instances:');
    disp(fieldnames(st));
    prompt = sprintf('Unknown instance: \n ''%s'' is not a known instance. \n Would you like to add it to your local config? (y/n): ', instance);
    response = input(prompt,'s');    
    if lower(response) == 'y'
        client_id     = input('Please enter the client_id: ', 's');
        client_secret = input('Please enter the client_secret: ', 's');
        client_url    = input('Please enter the instance url: ', 's');
        % Check that fields are not blank
        if isempty(client_id) || isempty(client_secret) || isempty(client_url);
            disp('One more more keys is empty, aborting');
            return
        else
            st.(instance).client_id = client_id;
            st.(instance).client_secret = client_secret;
            st.(instance).client_url = client_url;
            savejson('', st, localAuthFile);
            disp('Instance ID, URL, and Secret saved.');
        end
    else
        disp('Aborting');
        return
    end 
end

% Set the values
client_secret = st.(instance).client_secret;
client_id = st.(instance).client_id;
client_url = st.(instance).client_url;

% Check for client secret
if isempty(client_secret);
    prompt = (sprintf('\nst AUTH: Connecting to "%s"...\nPlease enter the client_secret: ', instance));
    client_secret = input(prompt, 's');
    if isempty(client_secret)
        disp('Aborting')
        return
    else
        % Save the value to st and save to file for next time
        st.(instance).client_secret = client_secret;
        savejson('', st, localAuthFile);
        disp('Client Secret saved.');
    end
end


%% Download oauth2cli.py from GitHub 

oauth2cli_code = fullfile(stDir, 'oauth2cli.py');

% Dowload the script (from github master)
oauth2cli_url = 'https://raw.githubusercontent.com/scitran/utilities/4988b955b6d3b531977ddd13ecb91265c96155c9/oauth2cli.py';
urlwrite(oauth2cli_url, oauth2cli_code);

% Make the code executable
fileattrib(oauth2cli_code, '+x');


%% Configure ENV for python

% TODO: Improve this
initPath = getenv('PATH');
if isempty(strfind(initPath, '/usr/local/bin'))
    setenv('PATH', ['/usr/local/bin:', [getenv('HOME'), '/anaconda/bin'], ':', initPath]);
end


%% Check tokenFile client_id

% If the user has selected an instance and a tokenFile exists we need to
% check that the instance chosen now is the same as the one in the
% tokenFile. If not, we need to remove the tokenFile to create a new one.
if exist(tokenFile,'file')
    T = loadjson(tokenFile);
    if ~strcmp(T.client_id, client_id)
        delete(tokenFile);
    end
end


%% Switch on action

switch lower(action)
    
    % Create a new token or refresh an existing one
    case {'create', 'refresh'}
        if exist(tokenFile,'file') 
            subFunction = 'refresh';
            cmd = ['python ', oauth2cli_code, ' --filename ', tokenFile , ' ', subFunction];
        else
            subFunction = 'create';
            cmd = ['python ', oauth2cli_code, ' --filename ', tokenFile , ' ', subFunction, ' --auth_host_port 9000 --client-secret ',  client_secret, ' --client-id ', client_id];
        end
        
        % Execute the call to python
        [status, token] = system(cmd);
    
    % Revoke an existing token
    case {'revoke', 'delete'}
        if exist(tokenFile, 'file')
            cmd = ['python ', oauth2cli_code, ' --filename ', tokenFile , ' ', action];
            % Execute the call to python
            [status, token] = system(cmd);
            if status == 0
                delete(tokenFile);
                return
            else
                error(token);
            end
        else
            warning('No token could be found to revoke!');
            status = 1;
            return
        end
    
    % Not a recognized action
    otherwise 
        error('Action not recognized!');
end


%% Check for errors and format token before returning

if (~isempty(strfind(lower(token), 'error')) || status > 0) 
    status = 1;
    warning('Check that you have Python and the dependencies installed AND on your PATH. HINT: Try "pip install oauth2client"');
    error(token);
end

% Remove trailing spaces from token string before returning
token = strtrim(token);


%% Reset PATH env

setenv('PATH', initPath);

return
